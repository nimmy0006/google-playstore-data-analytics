# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nk6rWW5xEtn4XhkKzXMaiXxoj_CA9kvo
"""

import os
import tarfile

# Paths to your files
files = ["/content/Part1.csv.tar.gz", "/content/Part2.csv.tar.gz", "/content/Part3.csv.tar.gz"]

# Extract each .tar.gz file
for file in files:
    if tarfile.is_tarfile(file):
        with tarfile.open(file, "r:gz") as tar:
            tar.extractall("/content/extracted_data")
        print(f"Extracted: {file}")

# Check extracted files
os.listdir("/content/extracted_data")

import pandas as pd
import os

# File paths
data_path = "/content/extracted_data"
files = ["Part1.csv", "Part2.csv", "Part3.csv"]

# Read and combine CSV files
df = pd.concat([pd.read_csv(os.path.join(data_path, file)) for file in files])

# Check the combined data
df.head()

# Check for missing values
df.isnull().sum().sort_values(ascending=False)

# Drop columns with too many missing values
threshold = len(df) * 0.7  # Keeping only columns with at least 30% non-null values
df_clean = df.dropna(axis=1, thresh=threshold)

# Check remaining columns
df_clean.info()

# Drop columns with too many missing values (relaxing threshold)
threshold = len(df) * 0.1  # Keeping only columns with at least 10% non-null values
df_clean = df.dropna(axis=1, thresh=threshold)

# Check remaining columns
df_clean.info()

df_clean.columns
df_clean.head()

import pandas as pd
import plotly.express as px

# Assuming df_clean is your cleaned dataframe
data = df_clean[['Category', 'Maximum Installs']].groupby('Category').sum().reset_index()

# Adding dummy country data (replace with actual country data if available)
data['Country'] = ['USA', 'India', 'UK', 'Germany', 'Australia'] * (len(data) // 5 + 1)
data = data[:len(data)]

# Creating the interactive choropleth map
fig = px.choropleth(data,
                    locations='Country',
                    locationmode='country names',
                    color='Maximum Installs',
                    hover_name='Category',
                    title='Global Installs by App Category')

fig.show()

# Make sure the country list matches the length of your data
countries = ['USA', 'India', 'UK', 'Germany', 'Australia'] * (len(data) // 5)
countries = countries[:len(data)]  # Trim to match data length
data['Country'] = countries

import pandas as pd

# Assuming 'data' is your DataFrame
countries = ['USA', 'India', 'UK', 'Germany', 'Australia']
data['Country'] = [countries[i % len(countries)] for i in range(len(data))]

# Continue with your plotting code...

countries = ['USA', 'India', 'UK', 'Germany', 'Australia'] * (len(data) // 5)
countries = countries[:len(data)]  # Trim to match data length
data['Country'] = countries

countries = ['USA', 'India', 'UK', 'Germany', 'Australia']
data['Country'] = [countries[i % len(countries)] for i in range(len(data))]

countries = ['USA', 'India', 'UK', 'Germany', 'Australia']
data['Country'] = [countries[i % len(countries)] for i in range(len(data))]

import pandas as pd

# Assuming your data is in a CSV file named "your_data.csv"
data = pd.read_csv("your_data.csv")

# Now, apply the corrected code
countries = ['USA', 'India', 'UK', 'Germany', 'Australia']
data['Country'] = [countries[i % len(countries)] for i in range(len(data))]

print(data.head()) # Check the first few rows

print(len(data))
print(len(data.index))
print(len(countries))

data.reset_index(drop=True, inplace=True)
countries = ['USA', 'India', 'UK', 'Germany', 'Australia'] * (len(data) // 5)
countries = countries[:len(data)]
data['Country'] = countries

print(len(data))          # Number of rows in your dataframe
print(data.index)         # Check the index
print(len(countries))     # Length of the country list

# Recreate the countries list to match the length of data
countries = ['USA', 'India', 'UK', 'Germany', 'Australia'] * (len(data) // 5 + 1)
countries = countries[:len(data)]  # Slice to exact length of data

# Assign the fixed-length list
data['Country'] = countries
print(data.head())  # Just to confirm the column is added

# Fix the countries list to ensure it matches the length of data
countries = ['USA', 'India', 'UK', 'Germany', 'Australia'] * ((len(data) // 5) + 1)
countries = countries[:len(data)]  # Slice exactly to the length of data

# Assign the corrected countries list
data['Country'] = countries

# Confirm
print(len(countries))  # Should now be 48
print(data.head())     # Check the new column

import plotly.express as px
import pandas as pd

# Assuming 'data' contains the cleaned dataset with 'Country' and 'Maximum Installs'
data = data[['Category', 'Maximum Installs', 'Country']]

# Creating the Choropleth map
fig = px.choropleth(
    data,
    locations='Country',
    locationmode='country names',
    color='Maximum Installs',
    hover_name='Category',
    title='Global Installs by App Category',
    color_continuous_scale='Viridis'
)

fig.show()